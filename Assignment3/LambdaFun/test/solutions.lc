-- pattern matching for lists
rec member = \x.\y. case y of {
    [] -> false,
    (a:as) -> case x == a of { true -> true, _ -> member x as } };;

-- removeList
rec removeList = \x.\y. case y of {
    [] -> [],
    (a:as) ->  case x == a of {true -> as, _ -> removeList x as } };;

-- sumList
rec sumList = \y. case y of {
    [] -> 0,
    (a:as) -> a + (sumList as ) };;

-- prodList
rec prodList = \y. case y of {
    [] -> 1,
    (a:as) -> a * (prodList as) };;

-- mapList
rec mapList = \x.\y. case y of {
    [] -> [],
    (a:as) -> (x a):(mapList x as) };;

-- plus_two
val plustwo = \x. x+2;;



-- insert
rec insert = \x.\y. case y of {
    [] -> [x],
    (a:as) -> case x <= a of { true -> x:(a:as), _ -> a:(insert x as) } };;

-- sort
rec sort = \y. case y of {
    [] -> [],
    (a:as) -> insert a (sort as) };;
