// Uncomment any one of the following lines or paste one of the comments in the command line
// Do not run the interpreter without predicting a result first

// (\x.x) a          //echo "(\x.x)a" | stack exec LambdaNat-exe
// \x.x a            //echo "\x.x a" | stack exec LambdaNat-exe
// (\x.\y.x) a b     //echo "(\x.\y.x) a b" | stack exec LambdaNat-exe
// (\x.\y.y) a b     //echo "(\x.\y.y) a b" | stack exec LambdaNat-exe
// (\x.\y.x) a b c   //echo "(\x.\y.x) a b c" | stack exec LambdaNat-exe
// (\x.\y.y) a b c   //echo "(\x.\y.y) a b c" | stack exec LambdaNat-exe
// (\x.\y.x) a (b c) //echo "(\x.\y.x) a (b c)" | stack exec LambdaNat-exe
// (\x.\y.y) a (b c) //echo "(\x.\y.y) a (b c)" | stack exec LambdaNat-exe
// (\x.\y.x) (a b) c //echo "(\x.\y.x) (a b) c" | stack exec LambdaNat-exe
// (\x.\y.y) (a b) c //echo "(\x.\y.y) (a b) c" | stack exec LambdaNat-exe
// (\x.\y.x) (a b c) //echo "(\x.\y.x) (a b c)" | stack exec LambdaNat-exe
// (\x.\y.y) (a b c) //echo "(\x.\y.y) (a b c)" | stack exec LambdaNat-exe

// make up your own

//test case for successor numbers
//(\x.x)(S 0) //should just give us S 0


//minus_one(S 0) //Should just give us 0
// minus_one 0

//if (S 0) = minus_one (S(S 0)) then (S 0) else 0 //should be true

//if (S (S 0)) = EMinusOne (S(S 0)) then (S 0) else 0 //should be false

//ELet
//"let" Id "=" Exp "in" Exp ;
//let x = (S 0) in (S (S 0)) //(\ x . e2 ) e1

let x = (S 0) in x
